const INPUT: &str = r#"C Z
C Z
A X
A X
B Z
B Z
B Z
A Z
B X
A X
A X
A X
C Z
C Z
C X
A X
A X
A X
C Z
B Z
C Z
A Y
B Z
A X
C Y
A X
A X
C Y
C Z
A Y
B Z
A X
C Y
B Z
B Z
B Z
A X
C X
C X
B Z
A X
C Z
A X
B Z
A Y
C X
A X
C Z
C Z
B Z
C Y
C X
C X
C X
C X
A Y
C Y
C Z
C Y
A X
C Y
A X
B Z
A Y
C X
A X
B Y
A X
C X
C X
C Z
A X
C X
A X
C X
B Z
A Z
B Y
B Z
B Z
A X
C Y
B X
A X
A X
B Z
A X
C X
C Z
C Z
A X
C Z
C Z
C Z
C X
C Z
A X
B Z
B Y
C Z
B Z
B Z
A X
B Z
C Y
C Z
A X
A Y
C Z
A X
B Y
C Y
C Z
A X
C Y
C X
A X
C X
A X
C Z
A X
C Y
A Y
C Z
C X
C Y
C Y
A Y
A Y
C Y
C Y
A Y
A X
C Z
C Z
C X
C X
C Z
A Y
C Z
C Z
A Y
A Y
B Z
A X
B Z
C Y
B Z
C Z
C Y
C Y
B Y
C X
A X
A X
A X
A Y
A X
C Z
C Z
C Z
A X
B Z
A X
B Z
C Y
C Z
A Y
C Y
A X
A X
C Z
B X
C Z
C Z
B Z
B Z
B Z
C Z
C X
C Z
A X
B Z
C Z
C X
A X
A Y
B Y
A X
B Z
A X
C Z
C Z
C X
B Z
C Z
C Z
C X
A X
A X
B Y
C Y
C Z
B Y
A X
B Z
A X
B X
B Z
C X
C X
C Y
C X
B Y
B Z
C X
A Y
C X
C Y
A X
C Z
C Z
C X
B Z
A Y
B Z
A Y
B X
A X
C Z
B Z
C X
C X
C X
A X
C X
B Z
C Z
B Y
B Z
A X
A X
C Z
B Z
A X
A Z
C Y
B Z
C X
C Z
A Y
C X
A X
A X
A Y
B Z
A X
B Z
A Y
B X
C X
C Y
A X
C Z
B X
C Z
C X
C X
C Z
A X
B Z
C Z
C X
C Z
B Y
A X
C X
C Y
A X
C Z
A X
B Z
C X
C X
B Z
C Z
C Z
C Y
A X
C Z
C X
A X
C Y
C Z
C Z
C Y
B Y
B Z
A X
B Y
C X
A X
A X
C Y
C Z
B Z
C X
C X
B Z
C Z
A X
A Y
A X
C Y
A Y
B Y
A X
A X
C X
C X
B Z
A Y
B Z
C Z
A X
A Y
A X
C X
A X
C Z
B Y
C Z
A X
B Z
C Z
C Z
A X
A X
B Z
B Z
B Z
A X
C X
A X
A X
C Y
C Y
C X
C X
A X
A Y
B Y
C Z
C Z
B Y
C X
C Z
A Y
C X
C Z
C X
B Z
C Y
C Z
C X
C Y
C Z
B Z
C Z
B Z
A X
B Y
B Y
C Z
B Z
C X
C Z
C Z
C Z
B Y
B Z
C Z
B Y
A X
A X
C X
A X
C X
A X
B Z
A X
A X
A X
C Z
A Y
A X
C Z
C X
A X
C X
A X
B Z
C Z
C Z
C Z
A X
A X
C Z
A X
B Z
C X
C Z
C Y
B Z
A X
B Z
A X
A Z
B Y
B Z
B Z
B Z
A Y
C Z
A X
B Y
C X
B X
B Z
C X
B Y
C Z
A X
C X
B Z
A X
B Z
A X
A X
B Y
C Y
C X
C X
C Z
A X
C Z
A X
B Y
C X
C Y
B Y
B Y
A Y
C X
A Y
C Z
C Y
A X
C Z
C Z
B Z
A X
A X
A X
A X
B Z
C Z
C X
C X
C Z
A X
B Z
B Y
C Y
A Y
C X
B Z
A Y
B Z
C Z
B Z
C X
A X
B Z
A X
A Y
C Y
B Z
B Z
C X
C Z
C Z
C Z
A X
B Z
A Y
A X
C Y
A Y
B Z
A Y
C Z
A Y
A Y
C X
A X
B Z
A Y
B Z
C X
A X
B Y
B Z
C Z
C Z
B Z
A X
A X
B Y
C Z
C Y
B Z
C Z
A Y
A X
C X
C Z
A X
A X
A Z
C X
C X
B X
B Z
A Y
C X
A Y
C X
C Z
A Y
B Z
A X
B X
A Y
C X
C Y
A Y
C X
B Y
C Y
A X
B Z
A X
C Z
A X
A X
C Z
C Z
B X
C X
A Y
B Z
C Z
A X
A X
C Z
C Y
A X
C X
C Z
C Y
C X
C Y
C X
C Z
C Z
B Z
A X
A Y
B Z
A X
B Z
C X
B Y
A X
A X
A X
A X
B Z
C Z
B Z
B Y
C Z
C X
C Z
C X
B Z
C Z
A X
C Z
C Z
A Y
C X
A X
B Z
A X
B Z
B Y
A X
A X
A X
A Y
C Z
A X
B Y
A Y
B Y
C Y
A X
A X
C Y
A X
C Z
B Z
C X
C Z
A X
B Z
C Z
B Z
B Z
B Z
C X
C Z
A X
A Y
C X
C Z
B Z
B Y
C Z
B Y
B Z
C Z
A Y
B Z
C X
C Y
A X
B Y
A X
C Z
C X
C Z
A X
C X
B Z
B X
C Z
B Z
A Y
A X
A Y
C Z
C Y
A X
B X
A Z
C Y
C X
C Y
C X
C Y
B Z
C X
B Y
C Z
C Y
B Z
A Y
B Y
C Z
C X
B Z
A Y
C Z
C Z
C Z
C Y
C X
C X
B Y
C Z
A Y
C Z
C X
B Y
C X
B Z
B Z
B Z
B Z
C Y
C Z
C X
B X
C Z
C Z
C Z
C X
B Y
B Z
C X
A X
C Y
B X
C X
C X
C Z
A X
A X
B Z
B Z
A X
C Z
A X
A Y
C X
B X
C Y
C Y
A X
A X
C Z
C Z
B Y
B Y
B Z
C X
A X
A Z
C Z
B Y
C Y
C X
C Y
B Z
C X
A X
A X
C Z
C Y
B X
C Z
B Z
A X
C X
A Y
C Y
C Z
B Z
C Z
A X
C Y
B Z
C Y
B X
C Z
C Z
A X
A X
C X
C Z
C X
C Y
C Z
A Y
C X
C Z
B Y
B Y
C Z
A X
C Y
A X
C X
C X
B Y
C Z
C Z
A X
A Y
C Z
B Z
C Y
A X
A X
C Z
C Z
A X
C Z
C Z
B Z
B Z
A X
A Y
A X
C Z
C X
A X
B X
C Z
C Z
B Y
A X
B Z
C X
C Z
C Z
C Z
C X
A Y
A X
A Y
A X
A Y
C Z
C Z
B Z
B Y
A X
B Z
C Z
C X
C Y
C Z
A X
C Y
B Y
B Z
C Z
B Y
C X
C Z
B Y
B Z
B Y
C X
C Z
C X
C Z
B Y
B Z
C X
A X
A Y
B Z
B Y
A X
A X
C Z
A X
A X
C X
A X
C Z
C X
A X
B X
A Y
C X
A X
C Y
A X
C Z
A X
A X
C Z
A X
A X
C Z
A X
B Y
B Z
A X
C X
A X
C X
B Z
C Y
A Y
C Z
B Z
A X
C X
A X
B Y
C X
B Y
B Z
A X
B Z
C X
B Z
A X
A X
C X
A X
C X
A Y
C Z
A X
B Y
B Z
C Z
C Z
A X
C Y
B Z
C X
B Z
B Z
C Z
A X
C X
C X
A Y
A X
C Z
B Z
A X
B X
A X
B Z
B Z
C Z
B Y
C Z
A X
C Z
C Z
C Z
C X
A X
A X
C Y
B Y
C Z
B Y
A X
B Z
A Y
C Y
B Y
C Z
C X
C X
A X
B Y
A X
A X
C Z
C X
C Y
A X
A X
A X
C X
B Z
B Y
A X
B Y
C X
C Z
B Z
A X
C X
C Z
B Y
A X
C Z
B Z
B Z
A X
B Y
A X
B Y
C Z
C Z
B Z
C Z
C Y
A X
B Z
C Z
A Y
C Z
B Z
B Z
C Z
B Y
C Z
C Z
B Z
A Y
C X
C Y
B Z
C X
C Z
A X
A X
C Y
A Z
C Z
C X
B Z
B Z
C Y
A X
A Y
C Z
A X
A X
B Z
A X
C X
C X
B X
B X
A Z
B Y
A X
A Y
C Z
A X
A X
B Z
B Z
C Y
A X
C Y
C Z
A Y
C Y
B X
C X
A X
B Z
A X
A X
A X
A X
A X
B X
A X
C Z
B Z
B Z
B X
A X
C Z
B Z
C Z
C Z
C Y
A X
C Y
C Y
C Z
A Y
C Z
A X
C X
C Z
A X
A Y
C Z
C X
A X
C X
B Y
C Z
B Z
A X
C Y
B Z
B Y
A X
C Z
A X
B Z
C Z
C Y
C Z
A X
A X
B Z
B Y
A X
C X
C Y
B X
C Z
A Y
C X
B Y
B Z
A Y
C Y
C Z
C Z
C X
A X
A X
C X
C X
C Z
C X
C X
B X
B Z
B Z
C X
C Z
C X
A X
A X
A X
C Z
C Y
B Z
C X
C X
A X
C X
C Y
A X
B Y
A X
C Z
C Z
B Z
A X
A X
A X
B Z
C X
A X
B Y
B Z
C X
B Y
C X
B Y
C Z
B X
A X
A X
B Z
A X
A X
A X
B Z
A X
C Z
C X
C Z
A X
C Y
C Y
C Z
C Z
C Z
A X
C Z
C X
C Z
C Z
A X
B Z
C X
C Y
B X
B Z
B Z
A X
C Y
B Y
C Z
B Z
C Z
C X
A Z
C Z
B X
C X
C Z
C Z
C X
C Z
C Z
A X
B Z
C Z
C X
A X
B Z
C Y
C Y
B Y
C X
A X
A X
C Z
B Z
C X
C X
C X
B Y
C Z
B X
C X
C Z
A X
A X
C Z
C Z
C X
C X
C Z
A X
C Z
C X
C Z
C Z
A X
C Z
A X
A X
A X
B Z
A X
B Z
C Z
C Z
A X
C Z
C Z
B Z
C Z
A Y
C X
A X
A X
C X
A X
C X
C X
A Y
B Y
C Z
B Z
C X
B Y
C Y
C X
C Z
A X
C Y
B Z
B Y
A X
B Y
B Y
A X
C X
C X
A X
A Y
C Y
B Z
A X
B Z
A Y
B Y
C Z
C Z
C Z
A Y
B Y
B Y
C Z
B Z
C Z
A X
C Y
A X
B Y
B Z
C X
C Y
A X
B Z
B Z
A X
B Z
C Y
A X
C X
C Z
C Z
A X
C Y
A X
C X
C X
B Z
B Y
A X
C Y
B Z
B Y
A X
C Z
A X
B Y
A X
A X
A X
C X
A X
C Z
B Z
C Z
A X
A X
B Y
C X
C Y
C Z
A X
C Z
B Z
A X
B Z
A X
B Y
B Z
C Z
C Z
C Y
C X
A X
C Z
A Y
A X
B Z
B Y
A X
C X
C Z
B Z
A X
C Z
C X
C Y
A X
A X
C Z
A X
A X
C X
C X
A X
C X
C Z
A X
A X
C Y
A Y
B Z
C X
C X
B Y
B Z
A X
B Z
C Z
C Z
A Y
C Y
C Z
A X
C Z
A X
C Y
C X
B X
B Z
A X
A X
B Z
A X
C X
C X
A Y
A X
A X
C Y
B Z
A X
B Y
C X
B Z
C Y
B Y
A X
C Z
B Y
B Z
A X
B Y
C X
C Z
A X
B Z
A X
C Y
C Z
A X
A X
C Y
C Y
C X
A Y
C Z
B Z
A X
A Y
C Z
C Z
C Z
C Z
B Y
A Y
A X
A X
C X
A X
B Y
C Z
B Z
A Y
C X
C X
A Y
A X
A X
C X
C Z
C X
A X
A Y
C X
C Z
C X
A X
A X
C Z
C X
A X
C X
C Z
A X
A X
C Z
B Y
A X
C Z
C Y
C Z
C Z
B X
B Z
B X
A X
C Z
B X
C Z
A X
C Z
A Y
A Z
B Z
C X
A X
A X
A X
A X
A X
C Z
A X
B X
A Y
A X
C X
A X
A Y
A Y
B Y
C X
A Y
A X
C Z
C Z
C Y
B Z
C X
C Z
A Y
C X
C Y
C X
A X
B Y
C Z
C Z
A X
C Z
B Z
B Z
C X
C X
A X
B Y
C X
C X
A X
C Z
B Y
C Y
C Z
A X
B Z
C Z
B Y
C X
A X
B Y
B Z
A X
C Y
B Z
C Z
C X
A X
C X
A X
B Y
C X
A X
C Y
B Z
B Z
B Z
C Y
A X
A X
A Y
C Z
B X
B Z
A X
A X
C X
A X
C X
A X
C X
A X
A X
A X
A Y
A Y
B Y
A X
B Y
A X
B Y
B Z
B Y
A Y
C Z
C Z
C Z
C Z
A X
C Z
C X
C Y
C Z
B Z
B Z
B Z
C Y
C Z
B Z
C X
A Y
A X
C X
C Y
A Y
B Y
C X
C X
B Y
C Z
A X
C X
C X
C X
C X
C X
C X
B Z
C Y
A X
A X
B Y
B Z
A X
C X
C Z
A X
B X
B Z
C Y
B Z
C Z
C Y
A X
C Z
B Y
C X
A X
A Y
A X
C X
A Y
A Y
C Z
B Z
C Z
C X
C Y
B Y
A X
C X
C Z
B Y
A X
B X
B Z
C Z
B Z
B Z
A X
A Y
A X
A X
B Z
C Z
A X
A Y
C Z
C Z
C Y
A X
B Z
C X
C X
A Y
A X
C X
C Y
C Z
C Y
C X
A X
B Z
C Y
B Z
C X
A X
A X
C X
C Z
C Y
C Y
A X
A Y
C Z
A Y
B Y
C Y
A Y
C Z
B Y
C X
A X
B Z
C Z
A X
A X
B Z
C X
B Z
C Z
C Z
A Y
A X
C X
A X
B Z
C X
A X
A X
B Y
A Z
B Z
C X
C Z
C X
C Z
C X
A X
C Z
B Y
C Y
C Z
A X
C Z
A X
A Z
A X
A X
C Z
A X
B Z
C X
B Z
A X
C X
A X
C X
C Z
B Z
A Y
C Y
C Z
C Z
C X
C Z
A X
A X
B Y
B Z
C Y
B Z
A Y
A X
A X
B Z
B X
A X
B Y
B Z
C X
A X
A X
C Z
B Y
C X
B Y
A Y
A Z
A X
B Y
C X
C Z
C Z
C Y
C Z
A X
B X
C X
A Y
A X
C Z
C Y
C X
B Z
A X
C X
C Z
A X
C Z
A X
C X
C X
A Y
C Z
A X
C X
C Z
C Y
A X
A Y
A Y
C Z
C X
A X
C Z
A Y
A Y
A X
B Z
C Z
B Y
C Z
B Y
C X
C Z
B Y
A X
A X
B Z
A X
C Z
A X
A X
B Y
A X
B Z
A Y
A X
A Y
C Z
B Z
A X
B X
B Y
B Z
A X
A Z
B Y
B Z
C X
B Z
A X
B Z
C Z
B Y
C X
A X
A Y
B Y
A Y
C X
C X
B Y
A Y
B Z
C Z
B Z
A Y
A X
B Z
B Z
A Y
C Z
C Z
B Z
C X
B Z
B Y
B Z
B Z
A X
A X
C X
C Z
B Z
A X
B Z
C Y
C Z
A Z
A X
A X
C Z
A X
C Z
C Z
C Z
B Z
A X
A Y
B X
A X
A X
A X
C Z
B X
B X
A X
C Z
A X
B X
A X
A X
B Z
A X
C Z
C Y
A X
B Z
A X
C Z
B Z
A X
A X
B Y
B Y
C Y
A X
B Z
C Y
A X
C Z
B Z
A X
C Z
B Z
C X
B X
B Z
C Z
A X
B Z
A X
A X
A X
A X
C Z
B Z
B Y
C Z
A X
C Z
A X
C X
C X
A X
B Y
C X
B Z
A Y
C Y
B Z
C Y
C X
A X
B Z
C X
B Y
A X
A Y
B Y
B Y
A X
C X
C Z
B Z
A Y
A X
B Y
C X
B Z
B X
C Y
B X
C X
B Y
C X
A X
C Z
B Z
B Y
B Y
A X
A X
A Z
B Z
B Z
C X
C Y
A Y
C Z
C X
A X
C Z
C X
B Z
A Y
B Z
C Z
B Z
B Z
C X
B Z
C X
C X
B Z
A X
B Y
B Z
A X
C X
A X
C Y
A X
C X
B X
C Z
C Y
C Z
B Z
C X
A X
A X
A Y
C Z
C Y
A Y
C Z
B Z
C Z
C Y
A X
A X
C X
C Z
C Z
A Z
C Z
A X
B Z
C X
C Z
A X
B Z
C X
A X
A Y
B Y
C X
A X
A X
C X
C Y
B Z
C X
A X
C X
B Z
B Y
A Y
C Z
A X
C Z
C Z
A X
C Y
B Z
A Y
B Y
B Y
A X
A X
C X
C X
B Y
C Z
C Z
C Z
C X
C Y
C Z
B Z
C Z
A Y
C Z
A X
B Z
B Y
B Z
A X
A X
A X
A X
C X
C Z
B Z
C X
B Z
C Z
A X
C X
C Z
B Y
A X
C X
A X
B Z
B Z
A X
A X
B Y
C Y
C Y
C X
A X
B Z
C Y
B Z
A Y
B Y
B Y
A X
B Z
A X
C X
C Z
A X
B Z
A Y
C Y
B Z
C Z
C Y
A X
C Y
A X
C X
B Z
C X
A X
C Z
A X
B Y
B Z
C X
C Y
B X
A X
B Z
A X
B Y
C X
C X
C Y
C Y
C X
B Y
C Z
C X
B Z
B Y
C X
A Y
C Z
C Z
C X
B X
B Y
A X
A X
C Z
C X
C Y
A X
C Y
A Y
C Z
C X
A X
C Z
C X
A X
B X
C X
C X
C X
B Y
B Z
C X
C Z
A Y
B Y
C X
C X
A X
B Z
C Z
A X
C Y
C Z
A Y
B Z
C X
C Z
A X
C Z
B Z
B Y
B Z
A X
C X
A Y
C X
C Z
B Y
C Y
C Z
C Z
A X
A X
A X
C Z
B Y
C Z
A X
A X
B Z
B Y
B Z
C Z
B Z
A Y
C Y
C Z
B Y
A X
A X
C Z
B Y
C Z
A X
C X
B Y
A Y
B Z
A X
A X
A X
B Y
A X
C Z
B Y
C Z
B Y
C Z
C X
C Y
C X
A X
A X
A X
C Z
C X
C X
B Y
A Y
B Z
B X
C Z
B Y
A X
C Y
B Z
C X
A X
A X
A X
A X
C X
B Y
A X
A X
B Y
A X
B Z
C Z
A X
A X
A X
A X
B Z
A X
C Z
C X
C Y
B Z
C Z
A X
C Y
C Z
A X
A X
C X
B Z
C X
B Z
C Z
A X
A X
A Y
B Y
C Z
B Y
A X
C X
C Z
C Z
C X
A X
A X
C Z
A X
A Y
A X
A X
C Z
C X
C X
C Z
C X
A X
C Z
C Z
B Z
A Y
A Y
B Y
A X
A X
C X
C X
A X
A X
C X
C X
B Y
C Z
A X
B Y
A X
A X
A X
C X
C Y
B Z
B Y
B Z
C Z
C Z
C X
C Z
A X
B Z
A Y
C Z
B Z
A X
C Y
B Z
C Z
C Y
A X
B Y
C Z
A X
A X
A X
C Z
C Z
C X
A Y
C X
B Z
B Y
A X
C X
C X
A Y
A Y
A X
B X
B Z
B Y
B Y
A X
C Y
A X
C Z
C X
C X
C Z
B Z
B Z
C Y
C X
B Z
C Z
A Y
C Y
A X
B Z
A X
C Y
B Z
B Y
C Z
A X
A X
C Z
B Z
B Z
C Z
C Y
C Z
C Z
C X
A Y
A Y
B Z
C Z
B Y
C X
C X
A Z
C Z
A X
A X
C X
A Y
C X
A X
A X
A X
C Y
A X
B Y
A X
B Y
A X
A X
A Y
C X
C Z
A X
C X
B Y
B Z
B Z
A Y
C Z
C X
C X
B Z
B Z
C X
B Y
A X
B Y
A X
A X
C Y
B X
C X
A Z
A Z
A X
C Z
C Y
C Z
C Y"#;

const TEST_INPUT: &str = r#"A Y
B X
C Z"#;
/*
A: Rock
B: Paper
C: Scissors

X: Rock
Y: PAper
Z: Scissors
*/

use std::{char::ParseCharError, cmp::Ordering::*, fmt::format, str::FromStr, string::ParseError};

#[derive(Eq, PartialEq, PartialOrd)]
enum Shape {
    Rock,
    Paper,
    Scissors,
}

impl Shape {
    fn shape_score(&self) -> u32 {
        match self {
            Shape::Rock => 1,
            Shape::Paper => 2,
            Shape::Scissors => 3,
        }
    }

    fn round(&self, them: &Shape) -> u32 {
        match self.cmp(&them) {
            Less => 0,
            Equal => 3,
            Greater => 6,
        }
    }
}

impl Ord for Shape {
    fn cmp(&self, other: &Self) -> std::cmp::Ordering {
        match (self, other) {
            // same
            (Shape::Rock, Shape::Paper) => Less,
            (Shape::Rock, Shape::Scissors) => Greater,
            (Shape::Paper, Shape::Rock) => Greater,
            (Shape::Paper, Shape::Scissors) => Less,
            (Shape::Scissors, Shape::Rock) => Less,
            (Shape::Scissors, Shape::Paper) => Greater,
            _ => Equal,
        }
    }
}

impl FromStr for Shape {
    type Err = ();
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "A" | "X" => Ok(Shape::Rock),
            "B" | "Y" => Ok(Shape::Paper),
            "C" | "Z" => Ok(Shape::Scissors),
            _ => Err(()),
        }
    }
}

fn shape_score(shape: &str) -> u32 {
    match shape {
        "X" => 1,
        "Y" => 2,
        "Z" => 3,
        _ => panic!("invalid shape"),
    }
}

fn match_score(opponent: &str, you: &str) -> u32 {
    match (opponent, you) {
        // losses: Paper<Scissors, Rock<Paper, Scissors<Rock
        ("A", "Z") | ("B", "X") | ("C", "Y") => 0,
        //ties
        ("A", "X") | ("B", "Y") | ("C", "Z") => 3,
        // wins: Rock>Scissors, Paper>Rock, Scissors>Paper
        ("A", "Y") | ("B", "Z") | ("C", "X") => 6,
        (a, b) => panic!("Wrong match: {a} {b}"),
    }
}

/// commands:
/// X: lose
/// Y: draw
/// Z: win
fn decide_outcome(opponent: &str, command: &str) -> String {
    let ret = match (opponent, command) {
        /// win
        ("A", "X") => "Z",
        ("B", "X") => "X",
        ("C", "X") => "Y",

        // lose
        ("A", "Z") => "Y",
        ("B", "Z") => "Z",
        ("C", "Z") => "X",

        //tie
        ("A", "Y") => "X",
        ("B", "Y") => "Y",
        ("C", "Y") => "Z",

        (_, _) => panic!("Wrong (opponent, command) tuple: ({opponent},{command})"),
    };

    ret.to_string()
}

fn main() {
    // part 1, first draft
    let matches = INPUT.lines();
    let mut match_counter = 0;
    for line in matches {
        let mut line = line.split(" ");
        let (opponent, you) = (line.next().unwrap(), line.next().unwrap());
        match_counter += shape_score(&you);
        match_counter += match_score(&opponent, &you);
    }
    println!("SCORE: {match_counter}");

    // part 1, enum
    let matches = INPUT.lines();
    let mut match_counter = 0;
    for line in matches {
        let mut line = line.split(" ");
        let (opponent, you) = (
            Shape::from_str(line.next().unwrap()).unwrap(),
            Shape::from_str(line.next().unwrap()).unwrap(),
        );
        match_counter += you.shape_score();
        match_counter += you.round(&opponent);
    }
    println!("SCORE: {match_counter}");

    // part 2, first draft
    let matches = INPUT.lines();
    match_counter = 0;
    for line in matches {
        let mut line = line.split(" ");
        let (opponent, command) = (line.next().unwrap(), line.next().unwrap());
        let you = decide_outcome(opponent, command);
        match_counter += shape_score(&you);
        match_counter += match_score(&opponent, &you);
    }
    println!("SCORE: {match_counter}");
}
